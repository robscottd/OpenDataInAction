load("FedTweTo20150908.RData")
conTweets<-rbind(conTweets,CTweetToDF)
load("FedTweTo20150912.RData")
conTweets<-rbind(conTweets,CTweetToDF)
conTweets<-conTweets[conTweets$screen_name!="TedJHurley",]
conTweetsNoRT<-conTweets[!grepl("^RT",conTweets$text),]
setwd("../")
setwd("./ODOttawa")
getwd()
load("FedTweTo20150810.RData")
conTweets<-CTweetToDF
load("FedTweTo20150815.RData")
conTweets<-rbind(conTweets,CTweetToDF)
load("FedTweTo20150824.RData")
conTweets<-rbind(conTweets,CTweetToDF)
load("FedTweTo20150902.RData")
conTweets<-rbind(conTweets,CTweetToDF)
load("FedTweTo20150908.RData")
conTweets<-rbind(conTweets,CTweetToDF)
load("FedTweTo20150912.RData")
conTweets<-rbind(conTweets,CTweetToDF)
conTweets<-conTweets[conTweets$screen_name!="TedJHurley",]
conTweetsNoRT<-conTweets[!grepl("^RT",conTweets$text),]
data(crude)
str(crude)
str(crude[[1]])
myPreProc<- function(text) {
trim <- function(y) return(gsub("^ *|(?<= ) | *$", "", y, perl=T))
text<-trim(text)
text<-gsub("(?<=[.:?!]\\s)(\\w)","\\L\\1",text,perl=TRUE)
text<-gsub("^(\\w)","\\L\\1",text,perl=TRUE)
text<-gsub("&amp"," ",text)
#    text<-gsub(" amp "," ",text)
text<-gsub("(http)[^ ]*"," ",text)
text<-gsub("(www)[^ ]*"," ",text)
text<-gsub("\\w*\\.(com)"," ",text)
text<-gsub("[.,&/-]"," ",text)
text<-trim(text)
text <- gsub("[^A-z0-9 #@]","",text)
text <- gsub("\\[","",text)
#   text <- gsub("\\_","",text)
text<-gsub("\"","",text)
text <- gsub("\\]","",text)
text <- gsub("`","",text)
text <- gsub("\\^","",text)
text <- gsub("([\\])","",text)
text<-trim(text)
text<-tolower(text)
return(text)
}
fileConn<-file("FedTo20150912.txt")
cleanText<-myPreProc(unlist(conTweetsNoRT$text))
writeLines(cleanText, fileConn)
close(fileConn)
fileConn<-file("FedTo20150912.txt")
toText<-readLines(fileConn)
close(fileConn)
toText<-PlainTextDocument(toText)
toText<-removeWords(toText, stopwords("english"))
theText <- toText
theReturn<-termFreq(theText)
head(theReturn[order(theReturn,decreasing=TRUE)],200)
stopwords("english")
stopwords("SMART")
toText<-removeWords(toText, stopwords("SMART"))
theText <- toText
theReturn<-termFreq(theText)
head(theReturn[order(theReturn,decreasing=TRUE)],200)
myPreProc<- function(text) {
trim <- function(y) return(gsub("^ *|(?<= ) | *$", "", y, perl=T))
text<-trim(text)
text<-gsub("(?<=[.:?!]\\s)(\\w)","\\L\\1",text,perl=TRUE)
text<-gsub("^(\\w)","\\L\\1",text,perl=TRUE)
text<-gsub("&amp"," ",text)
#    text<-gsub(" amp "," ",text)
text<-gsub("(http)[^ ]*"," ",text)
text<-gsub("(www)[^ ]*"," ",text)
text<-gsub("\\w*\\.(com)"," ",text)
text<-gsub("[.,&/-]"," ",text)
text<-trim(text)
text <- gsub("[^A-z0-9 #@']","",text)
text <- gsub("\\[","",text)
#   text <- gsub("\\_","",text)
text<-gsub("\"","",text)
text <- gsub("\\]","",text)
text <- gsub("`","",text)
text <- gsub("\\^","",text)
text <- gsub("([\\])","",text)
text<-trim(text)
text<-tolower(text)
return(text)
}
fileConn<-file("FedTo20150912.txt")
cleanText<-myPreProc(unlist(conTweetsNoRT$text))
writeLines(cleanText, fileConn)
close(fileConn)
fileConn<-file("FedTo20150912.txt")
toText<-readLines(fileConn)
close(fileConn)
toText<-PlainTextDocument(toText)
toText<-removeWords(toText, stopwords("SMART"))
theText <- toText
theReturn<-termFreq(theText)
head(theReturn[order(theReturn,decreasing=TRUE)],200)
theReturn<-termFreq(theText)
theReturn<-theReturn[!grepl("^'",names(theReturn))]
theReturn<-gsub("'","",theReturn)
head(theReturn[order(theReturn,decreasing=TRUE)],200)
theReturn<-termFreq(theText)
head(theReturn[order(theReturn,decreasing=TRUE)],200)
theReturn<-termFreq(theText)
theReturn<-theReturn[!grepl("^'",names(theReturn))]
names(theReturn)<-gsub("'","",names(theReturn))
head(theReturn[order(theReturn,decreasing=TRUE)],200)
fileConn<-file("FedTo20150912.txt")
toText<-readLines(fileConn)
close(fileConn)
toText<-PlainTextDocument(toText)
toText<-removeWords(toText, stopwords("SMART"))
toText<-removeWords(toText, stopwords("french"))
theText <- toText
theReturn<-termFreq(theText)
theReturn<-theReturn[!grepl("^'",names(theReturn))]
names(theReturn)<-gsub("'","",names(theReturn))
head(theReturn[order(theReturn,decreasing=TRUE)],200)
shiny::runApp('FedElect2015')
shiny::runApp('FedElect2015')
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
sys.Date
sys.Date()
Sys.Date()
Sys.Time()
Sys.time()
?diff
diff("2015/11/03",Sys.Date())
diff(date("2015/11/03"),Sys.Date())
diff(as.Date("2015/11/03"),Sys.Date())
as.Date("2015/11/03")
difftime(as.Date("2015/11/03"),Sys.Date())
str(difftime(as.Date("2015/11/03"),Sys.Date()))
difftime(as.Date("2015/11/03"),Sys.Date())[1]
difftime(as.Date("2015/11/03"),Sys.Date())[[1]]
difftime(as.Date("2015/10/19"),Sys.Date())[[1]]
difftime(as.Date("2015/09/15"),Sys.Date())[[1]]
difftime(as.Date("2015/09/16"),Sys.Date())[[1]]
?as.char
?as.char
?aschar
?char
str(difftime(as.Date("2015/09/16"),Sys.Date())[[1]])
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
setwd()
setwd("../")
load("FedFol20150916.RData")
getwd()
load(schools.RData)
load("schools.RData")
View(schools)
schools$School
schools$School<-gsub("%20"," ",schools$School)
View(schools)
schools$School<-gsub("%2D","-",schools$School)
View(schools)
schools$School<-gsub("St Patrick s","St Patricks",schools$School)
View(schools)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
popup
popup()
shiny::runApp()
View(schools)
str(schools)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
load("schools.RData")
View(schools)
unique(schools$City)
range(schools$Rank2015)
View(schools)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
View(schools)
shiny::runApp()
View(schools)
shiny::runApp()
shiny::runApp()
shiny::runApp()
View(schools)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?load
load("bikeWeather.RData")
setwd("../bikecounters")
setwd("../ODOttawa/bikecounters")
getwd()
load("bikeWeather.RData")
load("bikeWeather.RData")
View(finalMerge)
View(finalMerge)
View(finalMerge)
load("bikeWeather.RData")
View(finalMerge)
?if
()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
strptime("2010-01-01", format="%Y-%m-%d")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
View(finalMerge)
finalMerge$theDate[1]
str(finalMerge$theDate[1])
?as.Date.POSIXlt
as.POSIXlt(Sys.time(), "GMT")
as.POSIXlt(Sys.time(), "")
format(finalMerge$theDate[1],tx="UTC")
str(format(finalMerge$theDate[1],tx="UTC"))
str(finalMerge$theDate[1])
finalMerge$theDate[1]
finalMerge$theDate[1]
finalMerge$theDate[1]
?as.Date
shiny::runApp()
shiny::runApp()
shiny::runApp()
as.character(finalMerge$theDate[1])
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
View(day)
View(finalMerge)
shiny::runApp()
shiny::runApp()
View(finalMerge)
shiny::runApp()
shiny::runApp()
shiny::runApp()
finalMerge[finalMerge$theDate==strptime("2010-01-01", format="%Y-%m-%d"),c(1,3,5,7,8)]
View(finalMerge)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
View(finalMerge)
unique(finalMerge$theDate)
bb<-unique(finalMerge$theDate)
bb<-bb[order(bb)]
bb
data.frame(names(finalDefaultMethod()))
data.frame(names(finalMerge))
str(data.frame(names(finalMerge)))
?dataframe
?data.frame
str(data.frame(tag=names(finalMerge)))
data.frame(Location="X1ALEX",theDate=0,theCount=0,minTemp=0,lon=-75.7045,lat=45.4302)
rep(1,3)
bb<-data.frame(x1=rep(2,4),x2=3,x3=6)
bb
bc<-bb[bb$x1==2,]
bc
bc<-bb[bb$x1==5,]
bc
nrows(bc)
length(bc)
?nrows
?nrow
nrow(bc)
nilDF<-data.frame(Location="X1ALEX",theDate=strptime("2010-01-01", format="%Y-%m-%d"),
theCount=0,theWeather=0,lon=-75.7045,lat=45.4302)
names(nilDF)
names(nilDF)[3]
nilDF<-data.frame(Location="X1ALEX",theCount=0,theWeather=0,lon=-75.7045,lat=45.4302)
names(nilDF)[3]
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?colorBin
shiny::runApp()
shiny::runApp()
hist(finalMerge$totPrecip)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?leafletOutput
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
install.packages("shinythemes")
install.packages("leaflet")
install.packages("colorRamps")
runApp()
runApp()
